<?php

/**
 * @file
 * Tide Alert module install file..
 */

use Drupal\taxonomy\Entity\Term;
use Drupal\workflows\Entity\Workflow;
use Drupal\user\Entity\Role;

/**
 * Install default set of alert types.
 */
function _tide_alert_create_default_terms() {
  $alert_types = [
    'Emergency',
    'Fire',
    'Flood',
    'Medical',
    'Lightning',
    'Pollution',
    'Heat wave',
    'Traffic',
    'Notification',
  ];

  foreach ($alert_types as $alert_type) {
    Term::create([
      'vid' => 'alert_type',
      'name' => $alert_type,
      'weight' => 100,
    ])->save();
  }
}

/**
 * Implements hook_install().
 */
function tide_alert_install() {
  if (!\Drupal::service('config.installer')->isSyncing()) {
    // Enable Editorial workflow if workflow module is enabled.
    $moduleHandler = \Drupal::service('module_handler');

    if ($moduleHandler->moduleExists('workflows')) {
      $editorial_workflow = Workflow::load('editorial');
      if ($editorial_workflow) {
        $editorial_workflow->getTypePlugin()
          ->addEntityTypeAndBundle('node', 'alert');
        $editorial_workflow->save();
      }
    }

    // Enable entity type/bundles for use with scheduled transitions.
    if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
      $config_factory = \Drupal::configFactory();
      $config = $config_factory->getEditable('scheduled_transitions.settings');
      $bundles = $config->get('bundles');
      if ($bundles) {
        foreach ($bundles as $bundle) {
          $enabled_bundles = [];
          $enabled_bundles[] = $bundle['bundle'];
        }
        if (!in_array('alert', $enabled_bundles)) {
          $bundles[] = ['entity_type' => 'node', 'bundle' => 'alert'];
          $config->set('bundles', $bundles)->save();
        }
      }
      else {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'alert'];
        $config->set('bundles', $bundles)->save();
      }
    }
    _tide_alert_create_default_terms();
  }
}

/**
 * Add Notification alert type and Site Alerts view.
 */
function tide_alert_update_8001() {
  Term::create([
    'vid' => 'alert_type',
    'name' => 'Notification',
    'weight' => 100,
  ])->save();

  if (\Drupal::moduleHandler()->moduleExists('tide_site')) {
    module_load_include('inc', 'tide_core', 'includes/helpers');
    $config_location = [\Drupal::service('extension.list.module')->getPath('tide_alert') . '/config/optional'];
    _tide_import_single_config('views.view.site_alerts', $config_location);
  }
}

/**
 * Update link field to be not required field.
 */
function tide_alert_update_8002() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.field.node.alert.field_call_to_action');
  $config->set('required', FALSE);
  $config->save();
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_alert_update_8003() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      $enabled_bundles = [];
      foreach ($bundles as $bundle) {
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('alert', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'alert'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $bundles[] = ['entity_type' => 'node', 'bundle' => 'alert'];
      $config->set('bundles', $bundles)->save();
    }
  }
}

/**
 * Alerts should not to be indexed.
 */
function tide_alert_update_8004() {
  if (\Drupal::moduleHandler()->moduleExists('tide_search')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('search_api.index.node');
    $data = $config->get('datasource_settings.entity:node.bundles.selected');
    if (!in_array('alert', $data)) {
      array_push($data, 'alert');
      $config->set('datasource_settings.entity:node.bundles.selected', $data)
        ->save();
    }
  }
}

/**
 * Revoke permissions from all roles except Admins.
 */
function tide_alert_update_8005() {
  $role_types = [
    'editor',
    'approver',
    'previewer',
  ];

  foreach ($role_types as $role_type) {
    $role = Role::load($role_type);
    if ($role) {
      $role->revokePermission('create terms in alert_type');
      $role->revokePermission('edit terms in alert_type');
      $role->revokePermission('delete terms in alert_type');
      $role->save();
    }
  }
}
